@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudTextField @bind-Value="searchText" Label="Search" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudSpacer />
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Outlined.LightMode : Icons.Material.Outlined.DarkMode)" 
                        OnClick="ToggleTheme"
                        Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Storybase</MudText>
        </MudDrawerHeader>
        <MudDrawerContainer>
            <NavMenu />
        </MudDrawerContainer>
    </MudDrawer>
    <MudMainContent Style="@(_isDarkMode ? "background-color:#424242" : "background-color:#f6f9fe")">

        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    string searchText = "";

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    //Theming
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    //Method to change theme on click
    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}