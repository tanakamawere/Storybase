@using Storybase.Application.Services
@inject WriterClient writerClient

<MudNavMenu>
    <CascadingAuthenticationState>
        ﻿<AuthorizeView>
            <Authorized>
                <MudNavLink Href="/profile">Hello @UserName</MudNavLink>
                <MudNavLink Href="Account/Logout">Log out</MudNavLink>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="Account/Login">Log in</MudNavLink>
            </NotAuthorized>
            <Authorizing>
                <MudSkeleton />
            </Authorizing>
        </AuthorizeView>
    </CascadingAuthenticationState>
    <MudDivider />
    <MudNavLink Icon="@Icons.Material.Filled.Home" Href="/home">
        Home    
    </MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.LibraryBooks" Href="/library">
        Library
    </MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.Settings" Match="NavLinkMatch.All" Href="/settings">
        Settings
    </MudNavLink>
    <MudNavLink Icon="@Icons.Material.Filled.Help" Href="/help">
        Help
    </MudNavLink>

    <MudDivider />
    <div>
        @if (isWriter)
        {
            <MudNavLink Icon="@Icons.Material.Filled.Create" Href="/writing/dashboard">
                Writing Dashboard
            </MudNavLink>
        }
        else
        {
            <MudNavLink Icon="@Icons.Material.Filled.Create" Href="/writing/addwriter">
                Become a Writer
            </MudNavLink>
        }
    </div>
</MudNavMenu>

@code {
    private string UserName = "";
    string auth0UserId = "";
    bool isWriter = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            UserName = state?.User?.Identity?.Name ?? string.Empty;

            //Get user id
            auth0UserId = state.
                        User.
                        Claims.
                        FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.
                        Value ?? "";
            //Check if user is a writer
            var response = await writerClient.HasWriterProfileAsync(auth0UserId);
            if (response.IsSuccess)
                isWriter = response.Data;
        }
    }
}