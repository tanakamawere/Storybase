@page "/details/{Id:int}"
@inject LiteraryWorkClient literaryWorkClient

<MudGrid Spacing="2" style="padding:20px">
    @if (isBusy)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudItem xs="12" sm="6" Class="align-center justify-center">
            <img src="@literaryWork.CoverImageUrl" alt="@literaryWork.Title"
                 class="align-center justify-center"
                style="max-width:400px; width:100%;object-fit:fill;" />
        </MudItem>
        <MudItem Class="justify-center align-start" xs="12" sm="6">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h3">@literaryWork.Title</MudText>
                <MudText Typo="Typo.h4">@literaryWork.Writer.User.Name</MudText>

                <MudDivider/>
                <!--Buttons for actions for the literaryWork-->
                <MudStack Row="true" Spacing="3">
                    <MudIconButton Icon="@Icons.Material.Filled.HeartBroken"
                    Size="Size.Large"
                                   Ripple="true"
                                   Variant="Variant.Text"
                                   Color="Color.Secondary" />
                    <MudIconButton Icon="@Icons.Material.Filled.AddTask"
                                   Size="Size.Large"
                                    Ripple="true" 
                                    Variant="Variant.Text"
                                   Color="Color.Secondary" />
                    <MudIconButton Icon="@Icons.Material.Filled.Share"
                                   Size="Size.Large"
                                   Ripple="true"
                                   Variant="Variant.Text"
                                   Color="Color.Secondary" />
                </MudStack>


                <MudDivider />
                <MudText Typo="Typo.body1">@literaryWork.Summary</MudText>
            </MudStack>
        </MudItem>
    }
</MudGrid>


@code {
    [Parameter]
    public int Id { get; set; }
    bool isBusy = false;
    private LiteraryWork literaryWork = new LiteraryWork();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadliteraryWork();
    }

    private async Task LoadliteraryWork()
    {
        isBusy = true;
        literaryWork = await literaryWorkClient.GetLiteraryWorkByIdAsync(Id);
        isBusy = false;
    }
}