@page "/"
@page "/home"
@using Storybase.Application.Services
@using Storybase.Core.Models
@inject LiteraryWorkClient literaryWorkClient
@inject NavigationManager navManager
@attribute [Authorize]


<MudContainer Class="cards-section">


    <HeaderComponent Title="Explore"
                     Subtitle="All that Storybase has to offer" />

    <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="@(isBusy ? "d-block" : "d-none")" />

    <MudGrid Class="mt-8">
        @foreach (var item in literaryWorks)
        {
            <MudItem xs="12" sm="6" md="3" Class="@(isBusy ? "d-none" : "d-block")">
                <MudCard @onclick="() => GoToBookDetails(item.Id)">
                    <MudCardMedia Image="@item.CoverImageUrl" Title="@item.Title" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@item.Title</MudText>
                        <MudText Typo="Typo.h6">@item.Writer.User.Name</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>




@code {
    //List of books
    IEnumerable<LiteraryWork> literaryWorks { get; set; } = Enumerable.Empty<LiteraryWork>();

    bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        isBusy = true;
        var response = await literaryWorkClient.GetLiteraryWorksAsync();
        if (response.IsSuccess)
        {
            literaryWorks = response.Data;
        }
        else
        {
            //Show error message
        }
        isBusy = false;
    }

    //Go to book details page
    private void GoToBookDetails(int id)
    {
        navManager.NavigateTo($"/details/{id}");
    }
}