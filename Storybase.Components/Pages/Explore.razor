@page "/"

@inject IApiRepository apiRepository

<MudContainer Class="cards-section" Style="background-color:white">

    <MudProgressCircular Color="Color.Default" Indeterminate="true" Class="@(isBusy ? "d-block" : "d-none")" />
    <MudStack Row="true">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="border-radius: 50px; padding: 8px 24px;">
            Primary Pill Button
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="border-radius: 50px; padding: 8px 24px;">
            Primary Pill Button
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="border-radius: 50px; padding: 8px 24px;">
            Primary Pill Button
        </MudButton>
    </MudStack>
    <MudGrid Class="mt-8">
        @foreach (var book in books)
        {
            <MudItem xs="12" sm="6" md="3" Class="@(isBusy ? "d-none" : "d-block")">
                <MudCard>
                    <MudCardMedia Image="@book.CoverImageUrl" Title="@book.Title" />
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@book.Title</MudText>
                        <MudText Typo="Typo.body2">@book.Writer.Name</MudText>
                        <MudText Typo="Typo.body2">@book.Summary</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    //List of books
    IEnumerable<Book> books { get; set; } = Enumerable.Empty<Book>();

    bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        isBusy = true;
        books = await apiRepository.GetBooksAsync();
        isBusy = false;
    }
}