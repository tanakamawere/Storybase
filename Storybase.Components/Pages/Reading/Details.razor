@page "/details/{Id:int}"
@using Storybase.Core.DTOs
@inject LiteraryWorkClient literaryWorkClient
@inject BookmarkClient bookmarkClient
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject UserService userService
@attribute [Authorize]

<MudGrid Spacing="2" style="padding:20px">
    @if (isBusy)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudItem xs="12" sm="6" Class="d-flex align-center justify-center">
            <img src="@literaryWork.CoverImageUrl" alt="@literaryWork.Title"
            class="align-center justify-center"
            style="max-width:400px; width:100%;object-fit:fill;" />
        </MudItem>
        <MudItem Class="justify-center align-start" xs="12" sm="6">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h3">@literaryWork.Title</MudText>
                <MudText Typo="Typo.h4">@literaryWork.Writer.User.Name</MudText>

                <MudDivider/>

                <MudChipSet T="Genre">

                    @foreach (var genre in literaryWork.Genres)
                    {
                        <MudChip Size="Size.Small" Value="@genre.Id" Text="@genre.Name">
                            @genre.Name
                        </MudChip>
                    }
                </MudChipSet>
                <!--Buttons for actions for the literaryWork-->
                <MudStack Row="true" Spacing="3">
                    <MudIconButton Icon="@Icons.Material.Filled.BookmarkAdd"
                    Size="Size.Large"
                    Ripple="true"
                    Variant="Variant.Text"
                    Color="Color.Primary" 
                    OnClick="AddBookmark"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Share"
                    Size="Size.Large"
                    Ripple="true"
                    Variant="Variant.Text"
                    Color="Color.Primary" />

                    <MudButton FullWidth="true"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="@(literaryWork.Type.Equals(LiteraryWorkType.Book) ? "invisible": "visible")"
                    Ripple="true">
                        Read
                    </MudButton>
                </MudStack>


                <MudDivider />
                <MudText Typo="Typo.body1">@literaryWork.Summary</MudText>
                <MudDivider />

                <!--If there are chapters-->
                @if (literaryWork.Type.Equals(LiteraryWorkType.Book))
                {
                    <MudText Typo="Typo.h3">
                        Chapters
                    </MudText>
                    //List of chapters
                    if (literaryWork.Chapters.Count > 0)
                    {
                        foreach (var item in literaryWork.Chapters)
                        {
                            <MudPaper Elevation="2" Class="ma-3">
                                <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.h3">@item.ChapterNumber</MudText>
                                    <div>
                                        <MudText Typo="Typo.h6">@item.Title</MudText>
                                        <MudText Typo="Typo.body2">Uploaded on: @item.DatePosted</MudText>
                                    </div>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary">
                                        Read Chapter
                                    </MudButton>
                                </MudStack>
                            </MudPaper>
                        }
                    }
                    else
                    {
                        <EmptyComponent />
                    }
                }
            </MudStack>
        </MudItem>
    }
</MudGrid>

    
@code {
    [Parameter]
    public int Id { get; set; }
    private string Auth0UserId = "";
    bool isBusy = false;
    //If this is set to true, it means the lit work is by the current user. Show options to edit & manipulate
    bool isWritersWork = false;
    private LiteraryWork literaryWork = new LiteraryWork();
    Snackbar snackbar;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Auth0UserId = await userService.GetAuth0UserIdAsync();
        await LoadliteraryWork();
    }

    private async Task LoadliteraryWork()
    {
        isBusy = true;
        var response = await literaryWorkClient.GetLiteraryWorkByIdAsync(Id);
        if (response.IsSuccess)
        {
            literaryWork = response.Data;
            //Check if the literary work is by the current user
            if (literaryWork.Writer.User.Auth0UserId == await userService.GetAuth0UserIdAsync())
            {
                isWritersWork = true;
            }
        }
        else
        {
            //Show error message
        }
        isBusy = false;
    }

    private async void AddBookmark()
    {
        isBusy = true;
        var response = await bookmarkClient.AddBookmarkAsync(new BookmarkDto() 
        {
            AuthUserId = Auth0UserId,
            LiteraryWorkId = literaryWork.Id
        });
        if (response.IsSuccess)
        {
            snackbar = Snackbar.Add($"Added {literaryWork.Title} to your library", Severity.Normal);
        }
        else
        {
            snackbar = Snackbar.Add($"Something went wrong.", Severity.Error);
        }
        isBusy = false;
    }
}