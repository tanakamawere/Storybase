@page "/details/{Id:int}"
@using Storybase.Core.DTOs
@inject LiteraryWorkClient literaryWorkClient
@inject BookmarkClient bookmarkClient
@inject NavigationManager navManager
@inject PurchaseClient purchaseClient
@inject PayNowClient paynowClient
@inject ISnackbar Snackbar
@inject UserService userService
@inject IDialogService DialogService
@attribute [Authorize]

<MudGrid Spacing="2" style="padding:20px">
    @if (isBusy)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudItem xs="12" sm="6" Class="d-flex align-center justify-center">
            <img src="@literaryWork.CoverImageUrl" alt="@literaryWork.Title"
            class="align-center justify-center"
            style="max-width:400px; width:100%;object-fit:fill;" />
        </MudItem>
        <MudItem Class="justify-center align-start" xs="12" sm="6">
            <MudStack Spacing="4">
                <MudText Typo="Typo.h1">@literaryWork.Title</MudText>
                <MudLink Typo="Typo.h4" Href="@($"/writer/{literaryWork.Writer.UserName}")">@literaryWork.Writer.UserName</MudLink>

                <MudDivider />

                <MudChipSet T="Genre">

                    @foreach (var genre in literaryWork.Genres)
                    {
                        <MudChip Size="Size.Small" Value="@genre.Id" Text="@genre.Name">
                            @genre.Name
                        </MudChip>
                    }
                </MudChipSet>

                <!--Buttons for actions for the literaryWork-->
                <MudStack Row="true" Spacing="3">
                    <MudIconButton Icon="@Icons.Material.Filled.BookmarkAdd"
                    Size="Size.Large"
                    Ripple="true"
                    Variant="Variant.Text"
                    Color="Color.Primary"
                    OnClick="AddBookmark" />
                    <MudIconButton Icon="@Icons.Material.Filled.Share"
                    Size="Size.Large"
                    Ripple="true"
                    Variant="Variant.Text"
                    Color="Color.Primary" />

                    <!-- Free or Paid Section -->
                    @if (literaryWork.IsFree)
                    {
                        <MudText Typo="Typo.h6" Color="Color.Success">This work is free to read.</MudText>

                        <MudButton OnClick="@(() => Read(literaryWork.Id, "other"))" Variant="Variant.Filled" Color="Color.Primary" Class="@(literaryWork.Type.Equals(LiteraryWorkType.Book) ? "invisible": "visible")" Ripple="true">
                            Read
                        </MudButton>
                    }
                    else
                    {
                        if (purchaseStatusDto.IsPurchased)
                        {
                            <MudText Typo="Typo.caption" Color="Color.Success">You purchased this literary work on @purchaseStatusDto.PurchaseDate.ToString("f")</MudText>

                            <MudButton OnClick="@(() => Read(literaryWork.Id, "other"))" Variant="Variant.Filled" Color="Color.Primary" Class="@(literaryWork.Type.Equals(LiteraryWorkType.Book) ? "invisible": "visible")" Ripple="true">
                                Read
                            </MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6" Color="Color.Error">This work is paid.</MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Ripple="true" OnClick="PurchaseLiteraryWork">
                                Buy for $@literaryWork.Price
                            </MudButton>
                        }
                    }
                </MudStack>

                <MudDivider />
                <MudText Typo="Typo.body1">@literaryWork.Summary</MudText>
                <MudDivider />

                <!--If there are chapters-->
                @if (literaryWork.Type.Equals(LiteraryWorkType.Book))
                {
                    <MudText Typo="Typo.h3">
                        Chapters
                    </MudText>
                    <!-- List of chapters -->
                    if (literaryWork.Chapters.Count > 0)
                    {
                        foreach (var item in literaryWork.Chapters)
                        {
                            <MudPaper Elevation="2" Class="ma-3 pa-3">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceEvenly">
                                    <MudText Typo="Typo.h3">@item.ChapterNumber</MudText>
                                    <div>
                                        <MudText Typo="Typo.h6">@item.Title</MudText>
                                        <MudText Typo="Typo.body2">Uploaded on: @item.DatePosted.ToString("f")</MudText>
                                    </div>
                                    @if (purchaseStatusDto.IsPurchased || literaryWork.IsFree)
                                    {
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => Read(item.Id, "chapter"))">
                                            Read Chapter
                                        </MudButton>
                                    }
                                </MudStack>
                            </MudPaper>
                        }
                    }
                    else
                    {
                        <EmptyComponent />
                    }
                }
            </MudStack>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Auth0UserId = "";
    bool isBusy = false;
    //If this is set to true, it means the lit work is by the current user. Show options to edit & manipulate
    bool isWritersWork = false;
    private LiteraryWork literaryWork = new LiteraryWork();
    private PurchaseStatusDto purchaseStatusDto = new();
    private PaymentInitResponseDto paymentInitResponseDto = new();
    private IDialogReference loadingDialog;
    private IDialogReference paymentDialog;
    Snackbar snackbar;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Auth0UserId = await userService.GetAuth0UserIdAsync();
        await LoadliteraryWork();
    }

    private async Task LoadliteraryWork()
    {
        isBusy = true;
        var response = await literaryWorkClient.GetLiteraryWorkByIdAsync(Id);
        if (response.IsSuccess)
        {
            literaryWork = response.Data;

            //Check if user has purchased this work or not
            if (!literaryWork.IsFree)
            {
                PurchaseLitWorkDto purchaseLitWorkDto = new PurchaseLitWorkDto()
                    {
                        AuthUserId = Auth0UserId,
                        LiteraryWorkId = literaryWork.Id
                    };

                //Check if user has purchased this work
                var purchaseResponse = await purchaseClient.GetPurchaseByAuthUserIdAndLiteraryWorkIdAsync(purchaseLitWorkDto);
                if (purchaseResponse.IsSuccess)
                {
                    purchaseStatusDto = purchaseResponse.Data;
                }
            }
        }
        else
        {
            //Show error message
            snackbar = Snackbar.Add("Error loading literary work", Severity.Error);
        }
        isBusy = false;
    }

    private async void AddBookmark()
    {
        var response = await bookmarkClient.AddBookmarkAsync(new BookmarkDto()
            {
                AuthUserId = Auth0UserId,
                LiteraryWorkId = literaryWork.Id
            });
        if (response.IsSuccess)
        {
            snackbar = Snackbar.Add($"Added {literaryWork.Title} to your library", Severity.Normal);
        }
        else
        {
            snackbar = Snackbar.Add("You have already bookmarked this", Severity.Info);
        }
    }

    //Go to reading page
    private void Read(int workId, string workType)
    {
        navManager.NavigateTo($"/read/{workType}/{workId}");
    }

    //Method to purchase the work
    private async void PurchaseLiteraryWork()
    {
        //Show loading dialog
        await OpenLoadingDialog();

        try
        {
            PaymentRequestDto paymentRequestDto = new PaymentRequestDto()
            {
                Title = $"{literaryWork.Title} by {literaryWork.Writer.UserName}",
                UserAuthId = Auth0UserId,
                Amount = literaryWork.Price,
                LiteraryWorkPurchasedId = literaryWork.Id,
                UserEmail = "tanakamawere15@gmail.com",
                PhoneNumber = "0771234567",
                Name = "Tanaka Mawere",
                MobileGateway = MobileMoneyGateways.Ecocash
            };

            var response = await paynowClient.InitiatePaymentAsync(paymentRequestDto);
            if (response.IsSuccess)
            {
                paymentInitResponseDto = response.Data;

                //Check if the initialization to the paynow gateway was successful
                if (paymentInitResponseDto.IsSuccess)
                {
                    //Close loading dialog
                    DialogService.Close(loadingDialog);
                    //Open payment status dialog
                    var dialog = await OpenPaymentDialog();
                    var result = await dialog.Result;

                    if (!result.Canceled)
                    {
                        //Means payment was successful
                        snackbar = Snackbar.Add("Payment was successful", Severity.Success);
                        await LoadliteraryWork();
                        StateHasChanged();
                    }
                }
            }
            else
            {
                snackbar = Snackbar.Add(response.ErrorMessage, Severity.Error);
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    //Method to open loading dialog
    private async Task OpenLoadingDialog()
    {
        var loadingoptions = new DialogOptions()
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = false,
                CloseOnEscapeKey = false,
                CloseButton = false,
                BackdropClick = false,
            };
        loadingDialog = await DialogService.ShowAsync<LoadingDialog>(null, loadingoptions);
    }

    //Method to open payment dialog
    private async Task<IDialogReference> OpenPaymentDialog()
    {

        var parameters = new DialogParameters<PaymentStatusDialog>
        {
            { p => p.RedirectLink, paymentInitResponseDto.RedirectLink  },
            { p => p.PollLink, paymentInitResponseDto.PollUrl }
        };
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraLarge,
            };
        return DialogService.Show<PaymentStatusDialog>("Payment Status", parameters, options);
    }
}
