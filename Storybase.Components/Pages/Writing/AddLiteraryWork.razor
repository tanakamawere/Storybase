@page "/writing/add"
@page "/writing/edit/{id:int}"
@using Storybase.Core.DTOs
@inject LiteraryWorkClient literaryWorkClient
@inject GenresClient genreClient
@inject ISnackbar Snackbar
@inject NavigationManager navManager
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium">

    <HeaderComponent Title="Editor" Subtitle="Add, delete or edit your work">
    </HeaderComponent>
    <MudPaper Elevation="4" Class="pa-4">
        <EditForm Model="litWorkEditorModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <MudGrid>
                <MudItem lg="@(litWorkEditorModel.Chapters.Count > 0 ? 6 : 12)"
                    xxl="@(litWorkEditorModel.Chapters.Count > 0 ? 6 : 12)"
                xl="@(litWorkEditorModel.Chapters.Count > 0 ? 6 : 12)">
                    <MudText Typo="Typo.h5">
                        Details Editor
                    </MudText>

                    <MudTextField Variant="Variant.Outlined" @bind-Value="litWorkEditorModel.LiteraryWorkDto.Title" Label="Title" Required="true" />
                    <MudTextField Variant="Variant.Outlined" @bind-Value="litWorkEditorModel.LiteraryWorkDto.Summary" Label="Summary" Required="true" />
                    <MudTextField Variant="Variant.Outlined" @bind-Value="litWorkEditorModel.LiteraryWorkDto.CoverImageUrl" Label="Cover Image URL" />
                    <MudSelect Variant="Variant.Outlined"
                               T="LiteraryWorkType"
                               Value="litWorkEditorModel.LiteraryWorkDto.Type"
                               ValueChanged="OnLiteraryTypeChanged"
                               Label="Type"
                               Required="true">
                        @foreach (LiteraryWorkType item in literaryWorkTypes)
                        {
                            <MudSelectItem Value="@item">
                                @item
                            </MudSelectItem>
                        }
                    </MudSelect>

                    <input type="hidden" @bind="litWorkEditorModel.LiteraryWorkDto.Auth0Id" />

                    <!--Chips to show the genres-->
                    <MudChipSet Variant="Variant.Text" Color="Color.Info" T="Genre" SelectionMode="SelectionMode.SingleSelection">
                        @foreach (Genre item in selectedGenres)
                        {
                            <MudChip Ripple="true" OnClick="() => RemoveGenre(item)" Text="@item.Name"></MudChip>
                        }
                    </MudChipSet>

                    <!--Autocomplete field for Genre selection-->
                    <MudAutocomplete T="Genre" Label="Genre"
                                     Variant="Variant.Outlined"
                                     Placeholder="Genre of the work"
                                     Value="selectedGenre"
                                     ValueChanged="OnGenreSelected"
                                     SearchFunc="SearchGenres"
                                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true" CoerceValue="true">
                    </MudAutocomplete>


                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <MudCheckBox @bind-Value="litWorkEditorModel.LiteraryWorkDto.IsFree" Label="Is Free" />
                        <MudTextField @bind-Value="litWorkEditorModel.LiteraryWorkDto.Price" Label="Price" Disabled="@(litWorkEditorModel.LiteraryWorkDto.IsFree)"
                                        InputType="InputType.Number" Adornment="Adornment.Start" AdornmentText="USD" AdornmentIcon="@Icons.Material.Filled.Money"/>
                        <MudSlider Max="1" Min="0" @bind-Value="litWorkEditorModel.LiteraryWorkDto.FreePreviewPercentage"
                                   TickMarks="true" Step="0.1"
                                   Disabled="@(litWorkEditorModel.LiteraryWorkDto.IsFree ? true : false)">
                            The free preview percentage is @litWorkEditorModel.LiteraryWorkDto.FreePreviewPercentage.ToString("P0")
                        </MudSlider>
                    </MudStack>
                    <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <MudCheckBox Disabled="@(litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Book) ? false : true)"
                                     @bind-Value="litWorkEditorModel.LiteraryWorkDto.ProgressiveWriting"
                                     Label="Progressive Writing" />
                        <MudCheckBox @bind-Value="litWorkEditorModel.LiteraryWorkDto.Completed" Label="Completed" />
                    </MudStack>

                    <MudDivider />
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="pa-4">
                        <div>
                            <MudText Typo="Typo.h5">
                                Chapter Editor
                            </MudText>
                        </div>

                        <!-- Right Content -->
                        <div>
                            <MudButton Disabled="@((litWorkEditorModel.Chapters.Count > 0 && !litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Book) ? true : false))" 
                                        StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddChapter">
                                Add Chapter
                            </MudButton>
                        </div>
                    </MudStack>
                </MudItem>
                <MudItem lg="@(litWorkEditorModel.Chapters.Count > 0 ? 6 : 0)"
                    xxl="@(litWorkEditorModel.Chapters.Count > 0 ? 6 : 0)"
                xl="@(litWorkEditorModel.Chapters.Count > 0 ? 6 : 0)">
                    <MudContainer Class="@(showChapterEditor ? "d-block gap-3 pa-4" : "d-none gap-3 pa-4")">
                        @for (int i = 0; i < litWorkEditorModel.Chapters.Count; i++)
                        {
                            var index = i;

                            @if (litWorkEditorModel.LiteraryWorkDto.Type == LiteraryWorkType.Book)
                            {
                                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="pa-1">
                                    <MudText @bind-Value="litWorkEditorModel.Chapters[index].ChapterNumber">
                                        Chapter @(index + 1)
                                    </MudText>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => NavigateToChapterEditor(litWorkEditorModel.Chapters[index].Id)">
                                        Edit Chapter
                                    </MudButton>
                                </MudStack>

                            }
                            <MudTextField Typo="Typo.h6" Variant="Variant.Outlined" @bind-Value="litWorkEditorModel.Chapters[index].Title" Label="Title" Required="true" />
                            @if (!litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Book))
                            {
                                <MudTextField Variant="Variant.Outlined" @bind-Value="litWorkEditorModel.Chapters[index].Content" Label="Content" Required="true" Lines="10" />
                            }
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => RemoveChapter(index)">
                                Remove Chapter
                            </MudButton>
                            <MudDivider />

                        }

                    </MudContainer>
                </MudItem>
            </MudGrid>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
            <MudButton Href="/writing/dashboard" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>

        </EditForm>
    </MudPaper>
</MudContainer>


@code {
    [Parameter]
    public int id { get; set; } = 0;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool showChapterEditor = false;
    private string Auth0UserId = "";

    private LitWorkEditorModel litWorkEditorModel = new();
    private LiteraryWork literaryWork = new();

    private List<LiteraryWorkType> literaryWorkTypes = Enum.GetValues(typeof(LiteraryWorkType)).Cast<LiteraryWorkType>().ToList();
    List<Genre> Genres = new();
    private List<Genre> selectedGenres = new List<Genre>();
    private Genre selectedGenre = new();
    private Snackbar snackbar;

    protected override async Task OnInitializedAsync()
    {
        //Get genres
        var genreResponse = await genreClient.GetAllGenresAsync();
        if (genreResponse.IsSuccess)
        {
            Genres = genreResponse.Data.ToList();
        }

        //Get current logged in user details
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            //Get user id
            Auth0UserId = state.User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value ?? "";
        }

        if (id != 0)
        {
            var apiResponse = await literaryWorkClient.GetLiteraryWorkByIdAsync(id);
            if (apiResponse.IsSuccess)
            {
                literaryWork = apiResponse.Data; 
                litWorkEditorModel.LiteraryWorkDto = new LiteraryWorkDto
                {
                    Id = literaryWork.Id,
                    Title = literaryWork.Title,
                    Summary = literaryWork.Summary,
                    CoverImageUrl = literaryWork.CoverImageUrl,
                    Type = literaryWork.Type,
                    Price = literaryWork.Price,
                    IsFree = literaryWork.IsFree,
                    FreePreviewPercentage = literaryWork.FreePreviewPercentage,
                    ProgressiveWriting = literaryWork.ProgressiveWriting,
                    Completed = literaryWork.Completed
                };
                litWorkEditorModel.LiteraryWorkDto.Type = literaryWork.Type;
                selectedGenres = literaryWork.Genres.ToList();

                if (!literaryWork.Type.Equals(LiteraryWorkType.Book))
                {
                    showChapterEditor = true;
                    litWorkEditorModel.Chapters = literaryWork.Chapters.ToList();
                }
            }
        }
    }

    //Method to add chapter
    private void AddChapter()
    {
        //If the lit type is poem or essay, limit the content to 1
        if (litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Poem) || litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Essay))
        {
            if (litWorkEditorModel.Chapters.Count == 1)
            {
                Snackbar.Add("You can only add one chapter for this type of literary work", Severity.Info);
                return;
            }
        }
        litWorkEditorModel.Chapters.Add(new Chapter());
        showChapterEditor = true;
    }
    private void RemoveChapter(int index)
    {
        litWorkEditorModel.Chapters.RemoveAt(index);
    }

    private async Task HandleValidSubmit()
    {
        if (id == 0)
        {
            await AddLiteraryWorkAsync();
        }
        else
        {
            await UpdateLiteraryWork();
        }
    }

    private async Task AddLiteraryWorkAsync()
    {
        //If chapters are greater than 1 and the type is not book, throw error
        if (litWorkEditorModel.Chapters.Count > 1 && !litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Book))
        {
            Snackbar.Add("You can only add one chapter for this type of literary work", Severity.Info);
            return;
        }

        litWorkEditorModel.LiteraryWorkDto.CreatedOn = DateTime.Now;
        litWorkEditorModel.LiteraryWorkDto.LastModified = DateTime.Now;
        litWorkEditorModel.LiteraryWorkDto.Genres = selectedGenres.Select(g => new Genre { Id = g.Id }).ToList();
        litWorkEditorModel.LiteraryWorkDto.Auth0Id = Auth0UserId;
        litWorkEditorModel.LiteraryWorkDto.Chapters = litWorkEditorModel.Chapters;
        litWorkEditorModel.LiteraryWorkDto.IsDeleted = false;

        var response = await literaryWorkClient.AddLiteraryWorkAsync(litWorkEditorModel.LiteraryWorkDto);
        if (response.IsSuccess)
        {
            Snackbar.Add("Literary work added successfully", Severity.Success);
            navManager.NavigateTo("/writing/dashboard");
        }
        else
        {
            Snackbar.Add("Failed to add literary work", Severity.Error);
        }
    }

    private async Task UpdateLiteraryWork()
    {
        //If chapters are greater than 1 and the type is not book, throw error
        if (litWorkEditorModel.Chapters.Count > 1 && !litWorkEditorModel.LiteraryWorkDto.Type.Equals(LiteraryWorkType.Book))
        {
            Snackbar.Add("You can only add one chapter for this type of literary work", Severity.Info);
            return;
        }

        litWorkEditorModel.LiteraryWorkDto.LastModified = DateTime.Now;
        litWorkEditorModel.LiteraryWorkDto.Genres = selectedGenres.Select(g => new Genre { Id = g.Id }).ToList();
        litWorkEditorModel.LiteraryWorkDto.Auth0Id = Auth0UserId;
        litWorkEditorModel.LiteraryWorkDto.Chapters = litWorkEditorModel.Chapters;
        litWorkEditorModel.LiteraryWorkDto.IsDeleted = false;

        var response = await literaryWorkClient.UpdateLiteraryWorkAsync(litWorkEditorModel.LiteraryWorkDto);
        if (response.IsSuccess)
        {
            Snackbar.Add("Literary work updated successfully", Severity.Success);
            navManager.NavigateTo("/writing/dashboard");
        }
        else
        {
            Snackbar.Add("Failed to update literary work", Severity.Error);
        }
    }

    //Genre selection
    private void OnGenreSelected(Genre genre)
    {
        if (genre != null)
        {
            //Check if the genre is already selected
            if (selectedGenres.Contains(genre))
            {
                //Show error message
                Snackbar.Add("Genre already selected", Severity.Info);
                return;
            }

            //Max of 3 genres
            if (selectedGenres.Count < 3)
            {
                selectedGenres.Add(genre);
            }
            else
            {
                //Show error message
                Snackbar.Add("You can only select up to 3 genres", Severity.Info);
            }
        }
    }

    private async Task<IEnumerable<Genre>> SearchGenres(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return Genres.ToList();
        return Genres.Where(n => n.Name.ToLower().Contains(value.ToLower()))
                     .ToList();
    }

    private void RemoveGenre(Genre genre)
    {
        if (genre != null)
        {
            selectedGenres.Remove(genre);
        }
    }

    //For UI manipulation depending on Lit type
    private void OnLiteraryTypeChanged(LiteraryWorkType literaryWorkType)
    {
        switch (literaryWorkType)
        {
            case LiteraryWorkType.Book:
                litWorkEditorModel.LiteraryWorkDto.Type = LiteraryWorkType.Book;
                showChapterEditor = false;
                break;
            case LiteraryWorkType.Essay:
                litWorkEditorModel.LiteraryWorkDto.Type = LiteraryWorkType.Essay;
                showChapterEditor = true;
                break;
            case LiteraryWorkType.Poem:
                litWorkEditorModel.LiteraryWorkDto.Type = LiteraryWorkType.Poem;
                showChapterEditor = true;
                break;
            default:
                litWorkEditorModel.LiteraryWorkDto.Type = LiteraryWorkType.Book;
                break;
        }
        StateHasChanged();
    }

    private void NavigateToChapterEditor(int chapterId)
    {
        navManager.NavigateTo($"/writing/edit/chapter/{chapterId}");
    }



    public class LitWorkEditorModel
    {
        public LiteraryWorkDto LiteraryWorkDto { get; set; } = new();
        public List<Chapter> Chapters { get; set; } = new();
    }
}
